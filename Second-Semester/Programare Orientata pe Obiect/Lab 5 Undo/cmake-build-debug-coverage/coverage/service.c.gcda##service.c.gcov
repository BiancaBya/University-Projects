        -:    0:Source:C:/Users/Next/CLionProjects/buget_bun/service.c
        -:    0:Graph:C:\Users\Next\CLionProjects\buget_bun\cmake-build-debug-coverage\CMakeFiles\buget_bun.dir\service.c.gcno
        -:    0:Data:C:\Users\Next\CLionProjects\buget_bun\cmake-build-debug-coverage\CMakeFiles\buget_bun.dir\service.c.gcda
        -:    0:Runs:1
        -:    1://#include "MyList.h"
        -:    2:#include "service.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function createManagerBuget called 4 returned 100% blocks executed 100%
        4:    9:ManagerBuget createManagerBuget(){
        -:   10:
        -:   11:    ManagerBuget store;
        4:   12:    store.allbugets = createEmpty((DestroyFct) destroyBuget);
        4:   12-block  0
call    0 returned 4
        4:   13:    store.undolist = createEmpty((DestroyFct) destroyList);
call    0 returned 4
        4:   14:    return store;
        -:   15:
        -:   16:}
        -:   17:
function destroyManagerBuget called 4 returned 100% blocks executed 100%
        4:   18:void destroyManagerBuget(ManagerBuget *buget){
        -:   19:
        4:   20:    destroyList(buget->allbugets);
        4:   20-block  0
call    0 returned 4
        4:   21:    destroyList(buget->undolist);
call    0 returned 4
        -:   22:
        4:   23:}
        -:   24:
function valideaza called 6 returned 100% blocks executed 100%
        6:   25:int valideaza(Buget *p, MyList* l) {
        6:   26:    if (p->zi<1 || p->zi>31) {
        6:   26-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   26-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 5
        1:   27:        return 1;
        1:   27-block  0
        -:   28:    }
        5:   29:    if (strcmp("telefon&internet",p->type) != 0 &&
        5:   29-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:   30:        strcmp("imbracaminte",p->type) != 0 &&
        4:   30-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   31:        strcmp("transport",p->type) != 0 &&
        1:   31-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   32:        strcmp("mancare",p->type) != 0 &&
        1:   32-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   33:        strcmp("altele",p->type) != 0) {
        1:   33-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   34:        return 2;
        1:   34-block  0
        -:   35:    }
        4:   36:    if (p->suma < 0) {
        4:   36-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   37:        return 3;
        1:   37-block  0
        -:   38:    }
        -:   39:    int i;
        4:   40:    for(i=0;i<size(l);i++) {
        3:   40-block  0
        1:   40-block  1
        4:   40-block  2
call    0 returned 4
branch  1 taken 2
branch  2 taken 2 (fallthrough)
        2:   41:        Buget *b = get(l, i);
        2:   41-block  0
call    0 returned 2
        2:   42:        if(strcmp(b->type, p->type) == 0 && b->zi == p->zi) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   42-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   43:            return 4;
        1:   43-block  0
        -:   44:        }
        -:   45:    }
        2:   46:    return 0;
        2:   46-block  0
        -:   47:}
        -:   48:
function testValidare called 1 returned 100% blocks executed 85%
        1:   49:void testValidare()
        -:   50:{
        1:   51:    MyList *l = createEmpty((DestroyFct) destroyBuget);
        1:   51-block  0
call    0 returned 1
        1:   52:    Buget *p = createBuget("tableta", 12, 100);
call    0 returned 1
       1*:   53:    assert(valideaza(p, l) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   53-block  0
call    3 never executed
        1:   53-block  1
        1:   54:    destroyBuget(p);
        1:   54-block  0
call    0 returned 1
        1:   55:    Buget *t = createBuget("telefon&internet", 32, 100);
call    0 returned 1
       1*:   56:    assert(valideaza(t,l)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   56-block  0
call    3 never executed
        1:   56-block  1
        1:   57:    destroyBuget(t);
        1:   57-block  0
call    0 returned 1
        1:   58:    Buget *x = createBuget("telefon&internet", 12, -3);
call    0 returned 1
       1*:   59:    assert(valideaza(x,l)==3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   59-block  0
call    3 never executed
        1:   59-block  1
        1:   60:    destroyBuget(x);
        1:   60-block  0
call    0 returned 1
        1:   61:    Buget *s = createBuget("imbracaminte", 12, 10);
call    0 returned 1
       1*:   62:    assert(valideaza(s, l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   62-block  0
call    3 never executed
        1:   62-block  1
        1:   63:    add(l, s);
        1:   63-block  0
call    0 returned 1
        1:   64:    Buget* y = createBuget("imbracaminte", 12, 10);
call    0 returned 1
       1*:   65:    assert(valideaza(y, l) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   65-block  0
call    3 never executed
        1:   65-block  1
        1:   66:    destroyBuget(y);
        1:   66-block  0
call    0 returned 1
        1:   67:    destroyList(l);
call    0 returned 1
        1:   68:}
        -:   69:
function modificare called 1 returned 100% blocks executed 100%
        1:   70:void modificare(ManagerBuget* buget, char* tip, int zi, float suma, char* type, int day, float sum)
        -:   71:{
        1:   72:    int i, ok = 0;
        2:   73:    for(i=0;i<size(buget->allbugets);i++)
        1:   73-block  0
        1:   73-block  1
        2:   73-block  2
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -:   74:    {
        1:   75:        Buget *b = get(buget->allbugets, i);
        1:   75-block  0
call    0 returned 1
        1:   76:        if(strcmp(tip, b->type) == 0 && zi == b->zi && suma == b->suma)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   76-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   76-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        -:   77:        {
        1:   78:            Buget *t = createBuget(type, day, sum);
        1:   78-block  0
call    0 returned 1
        1:   79:            int ver = valideaza(t, buget->allbugets);
call    0 returned 1
        1:   80:            if(ver == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   81:                set(buget->allbugets, i, createBuget(type, day, sum));
        1:   81-block  0
call    0 returned 1
call    1 returned 1
        1:   82:                ok = 1;
        -:   83:            }
        1:   84:            destroyBuget(t);
        1:   84-block  0
call    0 returned 1
        -:   85:        }
        -:   86:    }
        1:   87:    if (ok) return;
        1:   87-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   87-block  1
        -:   88:}
        -:   89:
function test_modificare called 1 returned 100% blocks executed 82%
        1:   90:void test_modificare()
        -:   91:{
        1:   92:    ManagerBuget buget = createManagerBuget();
        1:   92-block  0
call    0 returned 1
        1:   93:    Buget *p = createBuget("altele", 23, 2);
call    0 returned 1
        1:   94:    add(buget.allbugets, p);
call    0 returned 1
        1:   95:    modificare(&buget, "altele", 23, 2,"imbracaminte", 20, 8);
call    0 returned 1
        1:   96:    Buget *b = get(buget.allbugets, 0);
call    0 returned 1
       1*:   97:    assert(b->zi == 20);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   97-block  0
call    2 never executed
        1:   97-block  1
       1*:   98:    assert(b->suma == 8);
        1:   98-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   98-block  1
call    2 never executed
        1:   98-block  2
       1*:   99:    assert(strcmp(b->type,"imbracaminte")==0);
        1:   99-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  1
call    2 never executed
        1:   99-block  2
        -:  100:
        1:  101:    destroyBuget(p);
        1:  101-block  0
call    0 returned 1
        1:  102:    destroyManagerBuget(&buget);
call    0 returned 1
        1:  103:}
        -:  104:
function delete_cmd called 1 returned 100% blocks executed 92%
        1:  105:void delete_cmd(ManagerBuget *buget, ElemType el){
        -:  106:
        3:  107:    for(int i = 0;i < size(buget->allbugets);i++)
        1:  107-block  0
        2:  107-block  1
        3:  107-block  2
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  108:    {
        2:  109:        if(get(buget->allbugets, i) == el) {
        2:  109-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
       1*:  110:            for (int j = i + 1; j < size(buget->allbugets); j++) {
        1:  110-block  0
        1:  110-block  1
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####:  111:                buget->allbugets->elems[j - 1] = buget->allbugets->elems[j];
    %%%%%:  111-block  0
        -:  112:            }
        1:  113:            i--;
        1:  114:            buget->allbugets->lg--;
        1:  114-block  0
        -:  115:        }
        -:  116:    }
        -:  117:
        1:  118:}
        -:  119:
function test_delete_cmd called 1 returned 100% blocks executed 92%
        1:  120:void test_delete_cmd(){
        -:  121:
        1:  122:    ManagerBuget buget = createManagerBuget();
        1:  122-block  0
call    0 returned 1
        1:  123:    Buget *b = createBuget("mancare", 1, 1);
call    0 returned 1
        1:  124:    buget.allbugets->cp = 1;
        1:  125:    add(buget.allbugets, b);
call    0 returned 1
        1:  126:    b = createBuget("mancare", 2, 2);
call    0 returned 1
        1:  127:    add(buget.allbugets, b);
call    0 returned 1
        1:  128:    delete_cmd(&buget,b);
call    0 returned 1
       1*:  129:    assert(buget.allbugets->lg == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  129-block  0
call    2 never executed
        1:  129-block  1
        -:  130:
        1:  131:    destroyBuget(b);
        1:  131-block  0
call    0 returned 1
        1:  132:    destroyManagerBuget(&buget);
call    0 returned 1
        -:  133:
        1:  134:}
        -:  135:
        -:  136:
function delete_undo called 3 returned 100% blocks executed 100%
        3:  137:ElemType delete_undo(MyList* v, int poz) {
        3:  138:    ElemType el = v->elems[poz];
        4:  139:    for (int i = poz; i < v->lg-1; i++) {
        3:  139-block  0
        4:  139-block  1
branch  0 taken 1
branch  1 taken 3 (fallthrough)
        1:  140:        v->elems[i] = v->elems[i + 1];
        1:  140-block  0
        -:  141:    }
        3:  142:    v->lg--;
        3:  143:    return el;
        3:  143-block  0
        -:  144:}
        -:  145:
        -:  146:
function test_delete_undo called 1 returned 100% blocks executed 91%
        1:  147:void test_delete_undo(){
        -:  148:
        1:  149:    MyList *l = createEmpty((DestroyFct) destroyBuget);
        1:  149-block  0
call    0 returned 1
        1:  150:    Buget *b = createBuget("mancare", 1, 1);
call    0 returned 1
        -:  151:
        1:  152:    add(l,b);
call    0 returned 1
        1:  153:    free(b);
        -:  154:
        1:  155:    b = createBuget("mancare", 2, 2);
call    0 returned 1
        1:  156:    add(l,b);
call    0 returned 1
        -:  157:
        1:  158:    delete_undo(l, 0);
call    0 returned 1
       1*:  159:    assert(l->lg == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  159-block  0
call    2 never executed
        1:  159-block  1
        -:  160:
        1:  161:    destroyList(l);
        1:  161-block  0
call    0 returned 1
        -:  162:
        1:  163:}
        -:  164:
        -:  165:
function undo called 3 returned 100% blocks executed 100%
        3:  166:int undo(ManagerBuget* buget){
        -:  167:
        3:  168:    if (size(buget->undolist) == 0)
        3:  168-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:  169:        return 0;
        1:  169-block  0
        -:  170:
        2:  171:    MyList *l = delete_undo(buget->undolist, buget->undolist->lg - 1);
        2:  171-block  0
call    0 returned 2
        2:  172:    destroyList(buget->allbugets);
call    0 returned 2
        2:  173:    buget->allbugets = l;
        2:  174:    return 1;
        -:  175:
        -:  176:}
        -:  177:
        -:  178:
function test_undo called 1 returned 100% blocks executed 90%
        1:  179:void test_undo(){
        -:  180:
        1:  181:    ManagerBuget buget = createManagerBuget();
        1:  181-block  0
call    0 returned 1
        1:  182:    Buget *b = createBuget("mancare", 1, 1);
call    0 returned 1
        -:  183:
        1:  184:    MyList  *toUndo = copyList(buget.allbugets, (CopyFct) copyBuget);
call    0 returned 1
        1:  185:    add(buget.undolist, toUndo);
call    0 returned 1
        -:  186:
        1:  187:    add(buget.allbugets, b);
call    0 returned 1
        1:  188:    b = createBuget("mancare", 2, 2);
call    0 returned 1
        -:  189:
        1:  190:    toUndo = copyList(buget.allbugets, (CopyFct) copyBuget);
call    0 returned 1
        1:  191:    add(buget.undolist, toUndo);
call    0 returned 1
        1:  192:    add(buget.allbugets, b);
call    0 returned 1
        -:  193:
        1:  194:    undo(&buget);
call    0 returned 1
       1*:  195:    assert(buget.undolist->lg == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  195-block  0
call    2 never executed
        1:  195-block  1
        1:  196:    undo(&buget);
        1:  196-block  0
call    0 returned 1
        1:  197:    undo(&buget);
call    0 returned 1
       1*:  198:    assert(buget.undolist->lg == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  198-block  0
call    2 never executed
        1:  198-block  1
        -:  199:
        1:  200:    destroyManagerBuget(&buget);
        1:  200-block  0
call    0 returned 1
        -:  201:
        1:  202:}
        -:  203:
