        -:    0:Source:C:/Users/Next/CLionProjects/lab9/repository.h
        -:    0:Graph:C:\Users\Next\CLionProjects\lab9\cmake-build-debug-coverage\CMakeFiles\lab9.dir\repository.cpp.gcno
        -:    0:Data:C:\Users\Next\CLionProjects\lab9\cmake-build-debug-coverage\CMakeFiles\lab9.dir\repository.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef LAB9_REPOSITORY_H
        -:    2:#define LAB9_REPOSITORY_H
        -:    3:#include "carte.h"
        -:    4:#include <string>
        -:    5:#include <vector>
        -:    6:#include <unordered_map>
        -:    7:
        -:    8:using namespace std;
        -:    9:
        -:   10:class RepoAbstract{
        -:   11:
        -:   12:public:
        -:   13:
        -:   14:    virtual void add_carte(const Carte& carte) = 0;
        -:   15:    virtual void modificare_carte(const Carte& carte_cautata, const Carte& carte_modificat) = 0;
        -:   16:    virtual void sterge_carte(const Carte& carte) = 0;
        -:   17:    virtual const Carte* find_carte(const string& titlu, const string& autor, const string& gen, int an) const = 0;
        -:   18:    virtual vector<Carte>& get_all() = 0;
        -:   19:    virtual int get_lungime() const = 0;
        -:   20:
function _ZN12RepoAbstractD2Ev called 0 returned 0% blocks executed 0%
    #####:   21:    virtual ~RepoAbstract() = default;
        -:   22:};
        -:   23:
        -:   24:
        -:   25:
        -:   26:class ListaCarti : public RepoAbstract
        -:   27:{
        -:   28:
        -:   29:private:
        -:   30:
        -:   31:    vector<Carte> lista_carti;
        -:   32:
        -:   33:public:
        -:   34:
        -:   35:    ListaCarti(const ListaCarti& ot) = default;
        -:   36:
        -:   37:    ListaCarti() = default;
        -:   38:    /*
        -:   39:        constructorul listei
        -:   40:        lista_carti -> lista de carti de tip vector<Carte>
        -:   41:    */
        -:   42:
        -:   43:    int get_lungime() const override;
        -:   44:    /*
        -:   45:        Returneaza lungimea listei de carti
        -:   46:    */
        -:   47:
        -:   48:    void add_carte(const Carte& carte) override;
        -:   49:    /*
        -:   50:        adauga o carte la lista de carti
        -:   51:        carte -> cartea adaugata, de tip Carte
        -:   52:    */
        -:   53:
        -:   54:    void modificare_carte(const Carte& carte_stearsa, const Carte& carte_noua) override;
        -:   55:    /*
        -:   56:        modifica cartea de la pozitia poz cu cartea primita ca parametru
        -:   57:        poz -> pozitia cartii de modificat
        -:   58:        carte -> cartea de adaugat
        -:   59:    */
        -:   60:
        -:   61:    void sterge_carte(const Carte& carte) override;
        -:   62:    /*
        -:   63:        sterge cartea de la pozitia poz din lista de carti
        -:   64:        poz -> pozitia cartii de sters
        -:   65:    */
        -:   66:
        -:   67:    [[nodiscard]] const Carte* find_carte(const string& titlu, const string& autor, const string& gen, int an) const override;
        -:   68:    /*
        -:   69:        Functia de gasire a unei carti dupa titlu, autor, gen si an
        -:   70:    */
        -:   71:
        -:   72:
function _ZN10ListaCarti7get_allEv called 54 returned 100% blocks executed 100%
       54:   73:    vector<Carte>& get_all() override {
       54:   74:        return lista_carti;
       54:   74-block  0
        -:   75:    }
        -:   76:
        -:   77:};
        -:   78:
        -:   79:
        -:   80:class RepoInFile : public ListaCarti{
        -:   81:
        -:   82:private:
        -:   83:
        -:   84:    string file_name;
        -:   85:    void ReadFromFile();
        -:   86:    void WriteToFile();
        -:   87:
        -:   88:public:
        -:   89:
        -:   90:    explicit RepoInFile(string filename) : ListaCarti(), file_name(filename){
        -:   91:        ReadFromFile();
        -:   92:    }
        -:   93:
        -:   94:    void add_carte(const Carte& carte) override{
        -:   95:
        -:   96:        ListaCarti::add_carte(carte);
        -:   97:        WriteToFile();
        -:   98:
        -:   99:    }
        -:  100:
        -:  101:    void modificare_carte(const Carte& carte_stearsa, const Carte& carte_noua) override{
        -:  102:
        -:  103:        ListaCarti::modificare_carte(carte_stearsa, carte_noua);
        -:  104:        WriteToFile();
        -:  105:
        -:  106:    }
        -:  107:
        -:  108:    void sterge_carte(const Carte& carte) override{
        -:  109:
        -:  110:        ListaCarti::sterge_carte(carte);
        -:  111:        WriteToFile();
        -:  112:
        -:  113:    }
        -:  114:
        -:  115:};
        -:  116:
        -:  117:
        -:  118:
        -:  119:
        -:  120:
        -:  121:class RepoDictionar : public RepoAbstract{
        -:  122:
        -:  123:private:
        -:  124:
        -:  125:    unordered_map<string, Carte> dictionar; // cheia este titlul cartii si valoarea e cartea
        -:  126:
        -:  127:public:
        -:  128:
        -:  129:    RepoDictionar() = default;
        -:  130:
        -:  131:    void add_carte(const Carte& carte) override{
        -:  132:        dictionar.insert(make_pair(carte.get_titlu(), carte));
        -:  133:    }
        -:  134:
        -:  135:    void modificare_carte(const Carte& carte_cautata, const Carte& carte_modificat) override{
        -:  136:        dictionar.erase(carte_cautata.get_titlu());
        -:  137:        dictionar.insert(make_pair(carte_modificat.get_titlu(), carte_modificat));
        -:  138:    }
        -:  139:
        -:  140:    void sterge_carte(const Carte& carte) override{
        -:  141:        dictionar.erase(carte.get_titlu());
        -:  142:    }
        -:  143:
        -:  144:    int get_lungime() const override {
        -:  145:        return dictionar.size();
        -:  146:    }
        -:  147:
        -:  148:    const Carte* find_carte(const string& titlu, const string& autor, const string& gen, int an) const override{
        -:  149:
        -:  150:        for (const auto& pereche : dictionar)
        -:  151:            if (pereche.second.get_titlu() == titlu and pereche.second.get_autor() == autor and pereche.second.get_gen() == gen and pereche.second.get_an() == an)
        -:  152:                return &pereche.second;
        -:  153:
        -:  154:        return nullptr;
        -:  155:    }
        -:  156:
        -:  157:    vector<Carte> carti;
        -:  158:
        -:  159:    vector<Carte>& get_all() override{
        -:  160:
        -:  161:        carti.clear();
        -:  162:
        -:  163:        for (const auto& pereche : dictionar)
        -:  164:            carti.push_back(pereche.second);
        -:  165:
        -:  166:        return carti;
        -:  167:    }
        -:  168:
        -:  169:};
        -:  170:
        -:  171:
        -:  172:#endif //LAB9_REPOSITORY_H
